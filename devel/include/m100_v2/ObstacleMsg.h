// Generated by gencpp from file m100_v2/ObstacleMsg.msg
// DO NOT EDIT!


#ifndef M100_V2_MESSAGE_OBSTACLEMSG_H
#define M100_V2_MESSAGE_OBSTACLEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace m100_v2
{
template <class ContainerAllocator>
struct ObstacleMsg_
{
  typedef ObstacleMsg_<ContainerAllocator> Type;

  ObstacleMsg_()
    : header()
    , center()
    , point1()
    , point2()
    , minRadius()  {
    }
  ObstacleMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , center(_alloc)
    , point1(_alloc)
    , point2(_alloc)
    , minRadius(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _center_type;
  _center_type center;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _point1_type;
  _point1_type point1;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _point2_type;
  _point2_type point2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _minRadius_type;
  _minRadius_type minRadius;





  typedef boost::shared_ptr< ::m100_v2::ObstacleMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m100_v2::ObstacleMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleMsg_

typedef ::m100_v2::ObstacleMsg_<std::allocator<void> > ObstacleMsg;

typedef boost::shared_ptr< ::m100_v2::ObstacleMsg > ObstacleMsgPtr;
typedef boost::shared_ptr< ::m100_v2::ObstacleMsg const> ObstacleMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::m100_v2::ObstacleMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::m100_v2::ObstacleMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace m100_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'm100_v2': ['/home/uav/ROS/m100/src/m100_v2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::m100_v2::ObstacleMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::m100_v2::ObstacleMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::m100_v2::ObstacleMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f9c26cc298db55081856b7b6f06a61c";
  }

  static const char* value(const ::m100_v2::ObstacleMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f9c26cc298db550ULL;
  static const uint64_t static_value2 = 0x81856b7b6f06a61cULL;
};

template<class ContainerAllocator>
struct DataType< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "m100_v2/ObstacleMsg";
  }

  static const char* value(const ::m100_v2::ObstacleMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geometry_msgs/Point32[] center\n\
geometry_msgs/Point32[] point1\n\
geometry_msgs/Point32[] point2\n\
float32[] minRadius\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::m100_v2::ObstacleMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.center);
      stream.next(m.point1);
      stream.next(m.point2);
      stream.next(m.minRadius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::m100_v2::ObstacleMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::m100_v2::ObstacleMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.center[i]);
    }
    s << indent << "point1[]" << std::endl;
    for (size_t i = 0; i < v.point1.size(); ++i)
    {
      s << indent << "  point1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.point1[i]);
    }
    s << indent << "point2[]" << std::endl;
    for (size_t i = 0; i < v.point2.size(); ++i)
    {
      s << indent << "  point2[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.point2[i]);
    }
    s << indent << "minRadius[]" << std::endl;
    for (size_t i = 0; i < v.minRadius.size(); ++i)
    {
      s << indent << "  minRadius[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.minRadius[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // M100_V2_MESSAGE_OBSTACLEMSG_H
