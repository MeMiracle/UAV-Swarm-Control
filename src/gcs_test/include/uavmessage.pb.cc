// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uavmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uavmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavMessage {
class MsgHeadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MsgHead>
     _instance;
} _MsgHead_default_instance_;
class MessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Message>
     _instance;
} _Message_default_instance_;

namespace protobuf_uavmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, stx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, src_uav_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, tgt_uav_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, topic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, msg_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, tgt_uav_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, reserved_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, playload_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MsgHead)},
  { 16, -1, sizeof(Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "uavmessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsgHead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MsgHead_default_instance_);_Message_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Message_default_instance_);_Message_default_instance_._instance.get_mutable()->msghead_ = const_cast< ::uavMessage::MsgHead*>(
      ::uavMessage::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020uavmessage.proto\022\nuavMessage\"\324\001\n\007MsgHe"
      "ad\022\013\n\003stx\030\001 \001(\r\022\020\n\010msg_type\030\002 \001(\r\022\022\n\nclu"
      "ster_id\030\003 \001(\r\022\022\n\nsrc_uav_id\030\004 \001(\r\022\025\n\rtgt"
      "_uav_count\030\005 \001(\r\022\020\n\010topic_id\030\006 \001(\r\022\016\n\006ms"
      "g_id\030\007 \001(\r\022\022\n\nmsg_length\030\010 \001(\r\022\017\n\007seq_nu"
      "m\030\t \001(\r\022\022\n\ntgt_uav_id\030\n \003(\r\022\020\n\010reserved\030"
      "\024 \001(\r\"A\n\007Message\022$\n\007msghead\030\001 \001(\0132\023.uavM"
      "essage.MsgHead\022\020\n\010playload\030\002 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uavmessage.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_uavmessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHead::kStxFieldNumber;
const int MsgHead::kMsgTypeFieldNumber;
const int MsgHead::kClusterIdFieldNumber;
const int MsgHead::kSrcUavIdFieldNumber;
const int MsgHead::kTgtUavCountFieldNumber;
const int MsgHead::kTopicIdFieldNumber;
const int MsgHead::kMsgIdFieldNumber;
const int MsgHead::kMsgLengthFieldNumber;
const int MsgHead::kSeqNumFieldNumber;
const int MsgHead::kTgtUavIdFieldNumber;
const int MsgHead::kReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHead::MsgHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_uavmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavMessage.MsgHead)
}
MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tgt_uav_id_(from.tgt_uav_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stx_, &from.stx_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_) -
    reinterpret_cast<char*>(&stx_)) + sizeof(reserved_));
  // @@protoc_insertion_point(copy_constructor:uavMessage.MsgHead)
}

void MsgHead::SharedCtor() {
  ::memset(&stx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&stx_)) + sizeof(reserved_));
  _cached_size_ = 0;
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:uavMessage.MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_uavmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgHead& MsgHead::default_instance() {
  protobuf_uavmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgHead* MsgHead::New(::google::protobuf::Arena* arena) const {
  MsgHead* n = new MsgHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:uavMessage.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tgt_uav_id_.Clear();
  ::memset(&stx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&stx_)) + sizeof(reserved_));
  _internal_metadata_.Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavMessage.MsgHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 src_uav_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_uav_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tgt_uav_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tgt_uav_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 topic_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topic_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tgt_uav_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tgt_uav_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_tgt_uav_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reserved = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavMessage.MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavMessage.MsgHead)
  return false;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavMessage.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stx = 1;
  if (this->stx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stx(), output);
  }

  // uint32 msg_type = 2;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_type(), output);
  }

  // uint32 cluster_id = 3;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cluster_id(), output);
  }

  // uint32 src_uav_id = 4;
  if (this->src_uav_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->src_uav_id(), output);
  }

  // uint32 tgt_uav_count = 5;
  if (this->tgt_uav_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tgt_uav_count(), output);
  }

  // uint32 topic_id = 6;
  if (this->topic_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->topic_id(), output);
  }

  // uint32 msg_id = 7;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msg_id(), output);
  }

  // uint32 msg_length = 8;
  if (this->msg_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msg_length(), output);
  }

  // uint32 seq_num = 9;
  if (this->seq_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num(), output);
  }

  // repeated uint32 tgt_uav_id = 10;
  if (this->tgt_uav_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tgt_uav_id_cached_byte_size_));
  }
  for (int i = 0, n = this->tgt_uav_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tgt_uav_id(i), output);
  }

  // uint32 reserved = 20;
  if (this->reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->reserved(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:uavMessage.MsgHead)
}

::google::protobuf::uint8* MsgHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uavMessage.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stx = 1;
  if (this->stx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stx(), target);
  }

  // uint32 msg_type = 2;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_type(), target);
  }

  // uint32 cluster_id = 3;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cluster_id(), target);
  }

  // uint32 src_uav_id = 4;
  if (this->src_uav_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->src_uav_id(), target);
  }

  // uint32 tgt_uav_count = 5;
  if (this->tgt_uav_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tgt_uav_count(), target);
  }

  // uint32 topic_id = 6;
  if (this->topic_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->topic_id(), target);
  }

  // uint32 msg_id = 7;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msg_id(), target);
  }

  // uint32 msg_length = 8;
  if (this->msg_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->msg_length(), target);
  }

  // uint32 seq_num = 9;
  if (this->seq_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num(), target);
  }

  // repeated uint32 tgt_uav_id = 10;
  if (this->tgt_uav_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tgt_uav_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tgt_uav_id_, target);
  }

  // uint32 reserved = 20;
  if (this->reserved() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->reserved(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavMessage.MsgHead)
  return target;
}

size_t MsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uavMessage.MsgHead)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 tgt_uav_id = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tgt_uav_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tgt_uav_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 stx = 1;
  if (this->stx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stx());
  }

  // uint32 msg_type = 2;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  // uint32 cluster_id = 3;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_id());
  }

  // uint32 src_uav_id = 4;
  if (this->src_uav_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src_uav_id());
  }

  // uint32 tgt_uav_count = 5;
  if (this->tgt_uav_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tgt_uav_count());
  }

  // uint32 topic_id = 6;
  if (this->topic_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->topic_id());
  }

  // uint32 msg_id = 7;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 msg_length = 8;
  if (this->msg_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_length());
  }

  // uint32 seq_num = 9;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_num());
  }

  // uint32 reserved = 20;
  if (this->reserved() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reserved());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uavMessage.MsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uavMessage.MsgHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uavMessage.MsgHead)
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uavMessage.MsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tgt_uav_id_.MergeFrom(from.tgt_uav_id_);
  if (from.stx() != 0) {
    set_stx(from.stx());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.src_uav_id() != 0) {
    set_src_uav_id(from.src_uav_id());
  }
  if (from.tgt_uav_count() != 0) {
    set_tgt_uav_count(from.tgt_uav_count());
  }
  if (from.topic_id() != 0) {
    set_topic_id(from.topic_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.msg_length() != 0) {
    set_msg_length(from.msg_length());
  }
  if (from.seq_num() != 0) {
    set_seq_num(from.seq_num());
  }
  if (from.reserved() != 0) {
    set_reserved(from.reserved());
  }
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uavMessage.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uavMessage.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHead::InternalSwap(MsgHead* other) {
  using std::swap;
  tgt_uav_id_.InternalSwap(&other->tgt_uav_id_);
  swap(stx_, other->stx_);
  swap(msg_type_, other->msg_type_);
  swap(cluster_id_, other->cluster_id_);
  swap(src_uav_id_, other->src_uav_id_);
  swap(tgt_uav_count_, other->tgt_uav_count_);
  swap(topic_id_, other->topic_id_);
  swap(msg_id_, other->msg_id_);
  swap(msg_length_, other->msg_length_);
  swap(seq_num_, other->seq_num_);
  swap(reserved_, other->reserved_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_uavmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHead

// uint32 stx = 1;
void MsgHead::clear_stx() {
  stx_ = 0u;
}
::google::protobuf::uint32 MsgHead::stx() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.stx)
  return stx_;
}
void MsgHead::set_stx(::google::protobuf::uint32 value) {
  
  stx_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.stx)
}

// uint32 msg_type = 2;
void MsgHead::clear_msg_type() {
  msg_type_ = 0u;
}
::google::protobuf::uint32 MsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.msg_type)
  return msg_type_;
}
void MsgHead::set_msg_type(::google::protobuf::uint32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.msg_type)
}

// uint32 cluster_id = 3;
void MsgHead::clear_cluster_id() {
  cluster_id_ = 0u;
}
::google::protobuf::uint32 MsgHead::cluster_id() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.cluster_id)
  return cluster_id_;
}
void MsgHead::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.cluster_id)
}

// uint32 src_uav_id = 4;
void MsgHead::clear_src_uav_id() {
  src_uav_id_ = 0u;
}
::google::protobuf::uint32 MsgHead::src_uav_id() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.src_uav_id)
  return src_uav_id_;
}
void MsgHead::set_src_uav_id(::google::protobuf::uint32 value) {
  
  src_uav_id_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.src_uav_id)
}

// uint32 tgt_uav_count = 5;
void MsgHead::clear_tgt_uav_count() {
  tgt_uav_count_ = 0u;
}
::google::protobuf::uint32 MsgHead::tgt_uav_count() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.tgt_uav_count)
  return tgt_uav_count_;
}
void MsgHead::set_tgt_uav_count(::google::protobuf::uint32 value) {
  
  tgt_uav_count_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.tgt_uav_count)
}

// uint32 topic_id = 6;
void MsgHead::clear_topic_id() {
  topic_id_ = 0u;
}
::google::protobuf::uint32 MsgHead::topic_id() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.topic_id)
  return topic_id_;
}
void MsgHead::set_topic_id(::google::protobuf::uint32 value) {
  
  topic_id_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.topic_id)
}

// uint32 msg_id = 7;
void MsgHead::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 MsgHead::msg_id() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.msg_id)
  return msg_id_;
}
void MsgHead::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.msg_id)
}

// uint32 msg_length = 8;
void MsgHead::clear_msg_length() {
  msg_length_ = 0u;
}
::google::protobuf::uint32 MsgHead::msg_length() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.msg_length)
  return msg_length_;
}
void MsgHead::set_msg_length(::google::protobuf::uint32 value) {
  
  msg_length_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.msg_length)
}

// uint32 seq_num = 9;
void MsgHead::clear_seq_num() {
  seq_num_ = 0u;
}
::google::protobuf::uint32 MsgHead::seq_num() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.seq_num)
  return seq_num_;
}
void MsgHead::set_seq_num(::google::protobuf::uint32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.seq_num)
}

// repeated uint32 tgt_uav_id = 10;
int MsgHead::tgt_uav_id_size() const {
  return tgt_uav_id_.size();
}
void MsgHead::clear_tgt_uav_id() {
  tgt_uav_id_.Clear();
}
::google::protobuf::uint32 MsgHead::tgt_uav_id(int index) const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.tgt_uav_id)
  return tgt_uav_id_.Get(index);
}
void MsgHead::set_tgt_uav_id(int index, ::google::protobuf::uint32 value) {
  tgt_uav_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.tgt_uav_id)
}
void MsgHead::add_tgt_uav_id(::google::protobuf::uint32 value) {
  tgt_uav_id_.Add(value);
  // @@protoc_insertion_point(field_add:uavMessage.MsgHead.tgt_uav_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgHead::tgt_uav_id() const {
  // @@protoc_insertion_point(field_list:uavMessage.MsgHead.tgt_uav_id)
  return tgt_uav_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgHead::mutable_tgt_uav_id() {
  // @@protoc_insertion_point(field_mutable_list:uavMessage.MsgHead.tgt_uav_id)
  return &tgt_uav_id_;
}

// uint32 reserved = 20;
void MsgHead::clear_reserved() {
  reserved_ = 0u;
}
::google::protobuf::uint32 MsgHead::reserved() const {
  // @@protoc_insertion_point(field_get:uavMessage.MsgHead.reserved)
  return reserved_;
}
void MsgHead::set_reserved(::google::protobuf::uint32 value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:uavMessage.MsgHead.reserved)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMsgheadFieldNumber;
const int Message::kPlayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_uavmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavMessage.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playload().size() > 0) {
    playload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playload_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::uavMessage::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:uavMessage.Message)
}

void Message::SharedCtor() {
  playload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:uavMessage.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  playload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msghead_;
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_uavmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_uavmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:uavMessage.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavMessage.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .uavMessage.MsgHead msghead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes playload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavMessage.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavMessage.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavMessage.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .uavMessage.MsgHead msghead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // bytes playload = 2;
  if (this->playload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->playload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:uavMessage.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uavMessage.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .uavMessage.MsgHead msghead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // bytes playload = 2;
  if (this->playload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->playload(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavMessage.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uavMessage.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes playload = 2;
  if (this->playload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->playload());
  }

  // .uavMessage.MsgHead msghead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uavMessage.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uavMessage.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uavMessage.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uavMessage.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playload().size() > 0) {

    playload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playload_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::uavMessage::MsgHead::MergeFrom(from.msghead());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uavMessage.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uavMessage.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  playload_.Swap(&other->playload_);
  swap(msghead_, other->msghead_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_uavmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uavmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .uavMessage.MsgHead msghead = 1;
bool Message::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void Message::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::uavMessage::MsgHead& Message::msghead() const {
  const ::uavMessage::MsgHead* p = msghead_;
  // @@protoc_insertion_point(field_get:uavMessage.Message.msghead)
  return p != NULL ? *p : *reinterpret_cast<const ::uavMessage::MsgHead*>(
      &::uavMessage::_MsgHead_default_instance_);
}
::uavMessage::MsgHead* Message::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::uavMessage::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:uavMessage.Message.msghead)
  return msghead_;
}
::uavMessage::MsgHead* Message::release_msghead() {
  // @@protoc_insertion_point(field_release:uavMessage.Message.msghead)
  
  ::uavMessage::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void Message::set_allocated_msghead(::uavMessage::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uavMessage.Message.msghead)
}

// bytes playload = 2;
void Message::clear_playload() {
  playload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Message::playload() const {
  // @@protoc_insertion_point(field_get:uavMessage.Message.playload)
  return playload_.GetNoArena();
}
void Message::set_playload(const ::std::string& value) {
  
  playload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uavMessage.Message.playload)
}
#if LANG_CXX11
void Message::set_playload(::std::string&& value) {
  
  playload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uavMessage.Message.playload)
}
#endif
void Message::set_playload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uavMessage.Message.playload)
}
void Message::set_playload(const void* value, size_t size) {
  
  playload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uavMessage.Message.playload)
}
::std::string* Message::mutable_playload() {
  
  // @@protoc_insertion_point(field_mutable:uavMessage.Message.playload)
  return playload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_playload() {
  // @@protoc_insertion_point(field_release:uavMessage.Message.playload)
  
  return playload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_playload(::std::string* playload) {
  if (playload != NULL) {
    
  } else {
    
  }
  playload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playload);
  // @@protoc_insertion_point(field_set_allocated:uavMessage.Message.playload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace uavMessage

// @@protoc_insertion_point(global_scope)
