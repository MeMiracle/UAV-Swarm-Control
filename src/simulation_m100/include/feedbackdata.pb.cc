// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feedbackdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feedbackdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace feedbackData {
class FeedbackDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeedbackData>
     _instance;
} _FeedbackData_default_instance_;

namespace protobuf_feedbackdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, batterypercent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, px_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, py_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, pz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, vz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, vw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, az_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, alt_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(FeedbackData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeedbackData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "feedbackdata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FeedbackData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeedbackData_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022feedbackdata.proto\022\014feedbackData\"\376\001\n\014F"
      "eedbackData\022\026\n\016batteryPercent\030\001 \001(\002\022\r\n\005s"
      "tate\030\002 \001(\r\022\n\n\002px\030\031 \001(\001\022\n\n\002py\030\032 \001(\001\022\n\n\002pz"
      "\030\033 \001(\001\022\014\n\004roll\030\034 \001(\001\022\r\n\005pitch\030\035 \001(\001\022\013\n\003y"
      "aw\030\036 \001(\001\022\n\n\002vx\030\037 \001(\001\022\n\n\002vy\030  \001(\001\022\n\n\002vz\030!"
      " \001(\001\022\n\n\002vw\030\" \001(\001\022\n\n\002ax\030# \001(\001\022\n\n\002ay\030$ \001(\001"
      "\022\n\n\002az\030% \001(\001\022\013\n\003lat\030& \001(\001\022\013\n\003lon\030\' \001(\001\022\013"
      "\n\003alt\030( \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "feedbackdata.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_feedbackdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedbackData::kBatteryPercentFieldNumber;
const int FeedbackData::kStateFieldNumber;
const int FeedbackData::kPxFieldNumber;
const int FeedbackData::kPyFieldNumber;
const int FeedbackData::kPzFieldNumber;
const int FeedbackData::kRollFieldNumber;
const int FeedbackData::kPitchFieldNumber;
const int FeedbackData::kYawFieldNumber;
const int FeedbackData::kVxFieldNumber;
const int FeedbackData::kVyFieldNumber;
const int FeedbackData::kVzFieldNumber;
const int FeedbackData::kVwFieldNumber;
const int FeedbackData::kAxFieldNumber;
const int FeedbackData::kAyFieldNumber;
const int FeedbackData::kAzFieldNumber;
const int FeedbackData::kLatFieldNumber;
const int FeedbackData::kLonFieldNumber;
const int FeedbackData::kAltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedbackData::FeedbackData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_feedbackdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:feedbackData.FeedbackData)
}
FeedbackData::FeedbackData(const FeedbackData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batterypercent_, &from.batterypercent_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_) -
    reinterpret_cast<char*>(&batterypercent_)) + sizeof(alt_));
  // @@protoc_insertion_point(copy_constructor:feedbackData.FeedbackData)
}

void FeedbackData::SharedCtor() {
  ::memset(&batterypercent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&batterypercent_)) + sizeof(alt_));
  _cached_size_ = 0;
}

FeedbackData::~FeedbackData() {
  // @@protoc_insertion_point(destructor:feedbackData.FeedbackData)
  SharedDtor();
}

void FeedbackData::SharedDtor() {
}

void FeedbackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackData::descriptor() {
  protobuf_feedbackdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_feedbackdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeedbackData& FeedbackData::default_instance() {
  protobuf_feedbackdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeedbackData* FeedbackData::New(::google::protobuf::Arena* arena) const {
  FeedbackData* n = new FeedbackData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedbackData::Clear() {
// @@protoc_insertion_point(message_clear_start:feedbackData.FeedbackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&batterypercent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&batterypercent_)) + sizeof(alt_));
  _internal_metadata_.Clear();
}

bool FeedbackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feedbackData.FeedbackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float batteryPercent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batterypercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double px = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double py = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pz = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vz = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vw = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ax = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ay = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double az = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &az_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double alt = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:feedbackData.FeedbackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feedbackData.FeedbackData)
  return false;
#undef DO_
}

void FeedbackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feedbackData.FeedbackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float batteryPercent = 1;
  if (this->batterypercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->batterypercent(), output);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // double px = 25;
  if (this->px() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->px(), output);
  }

  // double py = 26;
  if (this->py() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->py(), output);
  }

  // double pz = 27;
  if (this->pz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->pz(), output);
  }

  // double roll = 28;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->roll(), output);
  }

  // double pitch = 29;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->pitch(), output);
  }

  // double yaw = 30;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->yaw(), output);
  }

  // double vx = 31;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->vx(), output);
  }

  // double vy = 32;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->vy(), output);
  }

  // double vz = 33;
  if (this->vz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->vz(), output);
  }

  // double vw = 34;
  if (this->vw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->vw(), output);
  }

  // double ax = 35;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->ax(), output);
  }

  // double ay = 36;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->ay(), output);
  }

  // double az = 37;
  if (this->az() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->az(), output);
  }

  // double lat = 38;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->lat(), output);
  }

  // double lon = 39;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->lon(), output);
  }

  // double alt = 40;
  if (this->alt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->alt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:feedbackData.FeedbackData)
}

::google::protobuf::uint8* FeedbackData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:feedbackData.FeedbackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float batteryPercent = 1;
  if (this->batterypercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->batterypercent(), target);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // double px = 25;
  if (this->px() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->px(), target);
  }

  // double py = 26;
  if (this->py() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->py(), target);
  }

  // double pz = 27;
  if (this->pz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->pz(), target);
  }

  // double roll = 28;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->roll(), target);
  }

  // double pitch = 29;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->pitch(), target);
  }

  // double yaw = 30;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->yaw(), target);
  }

  // double vx = 31;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->vx(), target);
  }

  // double vy = 32;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->vy(), target);
  }

  // double vz = 33;
  if (this->vz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->vz(), target);
  }

  // double vw = 34;
  if (this->vw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->vw(), target);
  }

  // double ax = 35;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->ax(), target);
  }

  // double ay = 36;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->ay(), target);
  }

  // double az = 37;
  if (this->az() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->az(), target);
  }

  // double lat = 38;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->lat(), target);
  }

  // double lon = 39;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->lon(), target);
  }

  // double alt = 40;
  if (this->alt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->alt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedbackData.FeedbackData)
  return target;
}

size_t FeedbackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedbackData.FeedbackData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float batteryPercent = 1;
  if (this->batterypercent() != 0) {
    total_size += 1 + 4;
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // double px = 25;
  if (this->px() != 0) {
    total_size += 2 + 8;
  }

  // double py = 26;
  if (this->py() != 0) {
    total_size += 2 + 8;
  }

  // double pz = 27;
  if (this->pz() != 0) {
    total_size += 2 + 8;
  }

  // double roll = 28;
  if (this->roll() != 0) {
    total_size += 2 + 8;
  }

  // double pitch = 29;
  if (this->pitch() != 0) {
    total_size += 2 + 8;
  }

  // double yaw = 30;
  if (this->yaw() != 0) {
    total_size += 2 + 8;
  }

  // double vx = 31;
  if (this->vx() != 0) {
    total_size += 2 + 8;
  }

  // double vy = 32;
  if (this->vy() != 0) {
    total_size += 2 + 8;
  }

  // double vz = 33;
  if (this->vz() != 0) {
    total_size += 2 + 8;
  }

  // double vw = 34;
  if (this->vw() != 0) {
    total_size += 2 + 8;
  }

  // double ax = 35;
  if (this->ax() != 0) {
    total_size += 2 + 8;
  }

  // double ay = 36;
  if (this->ay() != 0) {
    total_size += 2 + 8;
  }

  // double az = 37;
  if (this->az() != 0) {
    total_size += 2 + 8;
  }

  // double lat = 38;
  if (this->lat() != 0) {
    total_size += 2 + 8;
  }

  // double lon = 39;
  if (this->lon() != 0) {
    total_size += 2 + 8;
  }

  // double alt = 40;
  if (this->alt() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feedbackData.FeedbackData)
  GOOGLE_DCHECK_NE(&from, this);
  const FeedbackData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedbackData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feedbackData.FeedbackData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feedbackData.FeedbackData)
    MergeFrom(*source);
  }
}

void FeedbackData::MergeFrom(const FeedbackData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedbackData.FeedbackData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batterypercent() != 0) {
    set_batterypercent(from.batterypercent());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.px() != 0) {
    set_px(from.px());
  }
  if (from.py() != 0) {
    set_py(from.py());
  }
  if (from.pz() != 0) {
    set_pz(from.pz());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.vz() != 0) {
    set_vz(from.vz());
  }
  if (from.vw() != 0) {
    set_vw(from.vw());
  }
  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
  if (from.az() != 0) {
    set_az(from.az());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.alt() != 0) {
    set_alt(from.alt());
  }
}

void FeedbackData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feedbackData.FeedbackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackData::CopyFrom(const FeedbackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedbackData.FeedbackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackData::IsInitialized() const {
  return true;
}

void FeedbackData::Swap(FeedbackData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedbackData::InternalSwap(FeedbackData* other) {
  using std::swap;
  swap(batterypercent_, other->batterypercent_);
  swap(state_, other->state_);
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(pz_, other->pz_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vz_, other->vz_);
  swap(vw_, other->vw_);
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  swap(az_, other->az_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(alt_, other->alt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedbackData::GetMetadata() const {
  protobuf_feedbackdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_feedbackdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedbackData

// float batteryPercent = 1;
void FeedbackData::clear_batterypercent() {
  batterypercent_ = 0;
}
float FeedbackData::batterypercent() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.batteryPercent)
  return batterypercent_;
}
void FeedbackData::set_batterypercent(float value) {
  
  batterypercent_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.batteryPercent)
}

// uint32 state = 2;
void FeedbackData::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 FeedbackData::state() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.state)
  return state_;
}
void FeedbackData::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.state)
}

// double px = 25;
void FeedbackData::clear_px() {
  px_ = 0;
}
double FeedbackData::px() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.px)
  return px_;
}
void FeedbackData::set_px(double value) {
  
  px_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.px)
}

// double py = 26;
void FeedbackData::clear_py() {
  py_ = 0;
}
double FeedbackData::py() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.py)
  return py_;
}
void FeedbackData::set_py(double value) {
  
  py_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.py)
}

// double pz = 27;
void FeedbackData::clear_pz() {
  pz_ = 0;
}
double FeedbackData::pz() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.pz)
  return pz_;
}
void FeedbackData::set_pz(double value) {
  
  pz_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.pz)
}

// double roll = 28;
void FeedbackData::clear_roll() {
  roll_ = 0;
}
double FeedbackData::roll() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.roll)
  return roll_;
}
void FeedbackData::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.roll)
}

// double pitch = 29;
void FeedbackData::clear_pitch() {
  pitch_ = 0;
}
double FeedbackData::pitch() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.pitch)
  return pitch_;
}
void FeedbackData::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.pitch)
}

// double yaw = 30;
void FeedbackData::clear_yaw() {
  yaw_ = 0;
}
double FeedbackData::yaw() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.yaw)
  return yaw_;
}
void FeedbackData::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.yaw)
}

// double vx = 31;
void FeedbackData::clear_vx() {
  vx_ = 0;
}
double FeedbackData::vx() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.vx)
  return vx_;
}
void FeedbackData::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.vx)
}

// double vy = 32;
void FeedbackData::clear_vy() {
  vy_ = 0;
}
double FeedbackData::vy() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.vy)
  return vy_;
}
void FeedbackData::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.vy)
}

// double vz = 33;
void FeedbackData::clear_vz() {
  vz_ = 0;
}
double FeedbackData::vz() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.vz)
  return vz_;
}
void FeedbackData::set_vz(double value) {
  
  vz_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.vz)
}

// double vw = 34;
void FeedbackData::clear_vw() {
  vw_ = 0;
}
double FeedbackData::vw() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.vw)
  return vw_;
}
void FeedbackData::set_vw(double value) {
  
  vw_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.vw)
}

// double ax = 35;
void FeedbackData::clear_ax() {
  ax_ = 0;
}
double FeedbackData::ax() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.ax)
  return ax_;
}
void FeedbackData::set_ax(double value) {
  
  ax_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.ax)
}

// double ay = 36;
void FeedbackData::clear_ay() {
  ay_ = 0;
}
double FeedbackData::ay() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.ay)
  return ay_;
}
void FeedbackData::set_ay(double value) {
  
  ay_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.ay)
}

// double az = 37;
void FeedbackData::clear_az() {
  az_ = 0;
}
double FeedbackData::az() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.az)
  return az_;
}
void FeedbackData::set_az(double value) {
  
  az_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.az)
}

// double lat = 38;
void FeedbackData::clear_lat() {
  lat_ = 0;
}
double FeedbackData::lat() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.lat)
  return lat_;
}
void FeedbackData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.lat)
}

// double lon = 39;
void FeedbackData::clear_lon() {
  lon_ = 0;
}
double FeedbackData::lon() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.lon)
  return lon_;
}
void FeedbackData::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.lon)
}

// double alt = 40;
void FeedbackData::clear_alt() {
  alt_ = 0;
}
double FeedbackData::alt() const {
  // @@protoc_insertion_point(field_get:feedbackData.FeedbackData.alt)
  return alt_;
}
void FeedbackData::set_alt(double value) {
  
  alt_ = value;
  // @@protoc_insertion_point(field_set:feedbackData.FeedbackData.alt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedbackData

// @@protoc_insertion_point(global_scope)
